from mcp.server.fastmcp import FastMCP, Context
from mcp.types import SamplingMessage, TextContent
import asyncio
import math

mcp = FastMCP(
    name="Sampling Testing",
)
@mcp.tool()
async def create_story(ctx: Context, topic: str) -> str:
    """
    Creates a short story by asking the client to generate it via sampling.

    Args:
        ctx: The MCP Context, used to communicate with the client.
        topic: The topic for the story.

    Returns:
        The story generated by the client's LLM.
    """
    print(f"-> Server: Tool 'create_story' called with topic: '{topic}'")

    try:
        print(f"-> Server: Sending 'sampling/create' request to client...")

        #    The server delegates the "thinking" to the client.
        result = await ctx.session.create_message(
            messages=[
                SamplingMessage(
                    role="user",
                    content=TextContent(type="text", text=f"Write a very short, three-sentence story about: {topic}"),
                )
            ],
            max_tokens=100,
            temperature =0.5, 
        )

        if result.content.type == "text":
            return result.content.text
        return str(result.content)

    except Exception as e:
        print(f"-> Server: An error occurred during sampling: {e}")
        return f"Error asking client to generate story: {e}"



@mcp.tool()
def number_facts(number: int) -> str:
    """
    Returns interesting facts about a number.
    
    Args:
        number: The number to analyze
    
    Returns:
        Facts about the number
    """
    facts = []
    
    # Basic properties
    if number % 2 == 0:
        facts.append("Even number")
    else:
        facts.append("Odd number")
    
    # Prime check
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True
    
    if is_prime(abs(number)):
        facts.append("Prime number")
    
    # Perfect square
    sqrt_n = math.sqrt(abs(number))
    if sqrt_n == int(sqrt_n):
        facts.append(f"Perfect square ({int(sqrt_n)}²)")
    
    # Factorial check (for small numbers)
    if number > 0 and number <= 10:
        factorial = math.factorial(number)
        facts.append(f"Factorial: {number}! = {factorial}")
    
    # Binary representation
    if number >= 0:
        facts.append(f"Binary: {bin(number)}")
    
    return f"Facts about {number}:\n" + "\n".join(f"• {fact}" for fact in facts)



# Create the app
mcp_app = mcp.streamable_http_app()

if __name__ == "__main__":
    print("-> Server: FastMCP Sampling Server starting...")
    print("-> Server: Available tools: story_creator")
    # For stdio mode, use: mcp.run()
    # For HTTP mode, you'll need to run with uvicorn or similar ASGI server



